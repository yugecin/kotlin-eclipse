import com.intellij.buildsupport.dependencies.PackageListFromManifest
import com.intellij.buildsupport.dependencies.PackageListFromSimpleFile
import com.intellij.buildsupport.resolve.http.idea.IntellijIdeaArtifactsResolver
import com.intellij.buildsupport.resolve.tc.kotlin.KotlinCompilerTCArtifactsResolver
import com.intellij.buildsupport.utils.FileUtils

ext {
    // constants
    teamcityBaseUrl = 'https://teamcity.jetbrains.com'
    ideaSdkUrl = 'https://www.jetbrains.com/intellij-repository/releases/com/jetbrains/intellij/idea'


    // properties that might/should be modifiable
    kotlinCompilerTcBuildId = project.findProperty('kotlinCompilerTcBuildId') ?: '2013385'
    kotlinCompilerVersion = project.findProperty('kotlinCompilerVersion') ?: '1.3.30'
    kotlinxVersion = project.findProperty('kolinxVersion') ?: '1.0.1'

    ideaVersion = project.findProperty('ideaVersion') ?: '183.5429.1'
    kotlinIdeaCompatibleVersionMinor = project.findProperty('kotlinIdeaCompatibleVersionMinor') ?: '2018.3'

    //directories
    testDataDir = file("${projectDir.parentFile}/kotlin-eclipse-ui-test/common_testData")
    //TODO later refactor to the proper project dir
    testModuleLibDir = file("${projectDir.parentFile}/kotlin-eclipse-ui-test/lib")
    //TODO later refactor to the proper project dir

    downloadDirName = 'downloads'
    libDir = project.findProperty('teamcity.buildsupport.workingDir') ? file("${teamcity.build.workingDir}/lib")
            : file('lib')
    downloadDir = file("$libDir/$downloadDirName")

    tcArtifactsResolver = new KotlinCompilerTCArtifactsResolver(teamcityBaseUrl,
            project.hasProperty('lastSuccessfulBuild'),
            kotlinCompilerTcBuildId,
            kotlinCompilerVersion,
            kotlinIdeaCompatibleVersionMinor)

    ideaArtifactsResolver = new IntellijIdeaArtifactsResolver(ideaSdkUrl, ideaVersion)
}

wrapper {
    gradleVersion = '4.10.2'
}


configurations {
    testFrameworkDependencies
    kotlinxLibraries
}

dependencies {
    testFrameworkDependencies 'com.google.code.gson:gson:2.3.1'
    kotlinxLibraries("org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinxVersion") { transitive = false }
    kotlinxLibraries("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlinxVersion") { transitive = false }
}

repositories {
    mavenCentral()
}


task clean {
    doLast {
        FileUtils.cleanDir testDataDir
        FileUtils.cleanDir testModuleLibDir

        FileUtils.cleanDirExceptSubDirName libDir, downloadDirName
    }
}

task downloadTestData {
    ext {
        locallyDownloadedTestDataFile = file("$testDataDir/kotlin-test-data.zip")
    }

    doLast {
        tcArtifactsResolver.downloadTo tcArtifactsResolver.KOTLIN_TEST_DATA_ZIP, locallyDownloadedTestDataFile

        copy {
            from zipTree(locallyDownloadedTestDataFile)

            into testDataDir
        }

        locallyDownloadedTestDataFile.delete()
    }
}

task downloadTestFrameworkDependencies(type: Copy) {
    from configurations.testFrameworkDependencies

    into testModuleLibDir
}

task downloadKotlinCompilerPluginAndExtractSelectedJars {
    ext {
        locallyDownloadedCompilerFile = file("$downloadDir/kotlin-compiler.zip")
    }

    doLast {
        tcArtifactsResolver.downloadTo tcArtifactsResolver.KOTLIN_PLUGIN_ZIP, locallyDownloadedCompilerFile

        copy {
            from zipTree(locallyDownloadedCompilerFile)

            includes = ['Kotlin/lib/j2k.jar',
                        'Kotlin/kotlinc/lib/kotlin-compiler.jar',
                        'Kotlin/kotlinc/lib/kotlin-stdlib.jar',
                        'Kotlin/kotlinc/lib/kotlin-reflect.jar',
                        'Kotlin/kotlinc/lib/kotlin-script-runtime.jar',
                        'Kotlin/kotlinc/lib/kotlin-scripting-compiler.jar',
                        'Kotlin/kotlinc/lib/kotlin-jdk-annotations.jar',
                        'Kotlin/kotlinc/lib/kotlin-stdlib-sources.jar',
                        'Kotlin/kotlinc/lib/allopen-compiler-plugin.jar',
                        'Kotlin/kotlinc/lib/noarg-compiler-plugin.jar',
                        'Kotlin/kotlinc/lib/sam-with-receiver-compiler-plugin.jar',
                        'Kotlin/kotlinc/lib/annotations-13.0.jar']

            includeEmptyDirs = false

            into libDir

            rename 'j2k.jar', 'kotlin-converter.jar'

            // flatten + rename
            eachFile { FileCopyDetails fileDetails ->
                fileDetails.setRelativePath new RelativePath(true, fileDetails.name)
            }
        }
    }
}

task downloadKotlinTCArtifacts {
    doLast {
        tcArtifactsResolver.downloadTo tcArtifactsResolver.KOTLIN_IDE_COMMON_JAR, file("$libDir/kotlin-ide-common.jar")

        tcArtifactsResolver.downloadTo tcArtifactsResolver.KOTLIN_FORMATTER_JAR, file("$libDir/kotlin-formatter.jar")
    }
}

task downloadIntellijCoreAndExtractSelectedJars {
    ext {
        locallyDownloadedIntellijCoreFile = file("$downloadDir/intellij-core.zip")
    }

    doLast {
        ideaArtifactsResolver.downloadTo ideaArtifactsResolver.INTELLIJ_CORE_ZIP, locallyDownloadedIntellijCoreFile

        copy {
            from zipTree(locallyDownloadedIntellijCoreFile)

            includes = ['intellij-core.jar']

            includeEmptyDirs = false

            into libDir
        }
    }
}

task downloadIdeaDistributionZipAndExtractSelectedJars {
    ext {
        locallyDownloadedIdeaZipFile = file("$downloadDir/ideaIC.zip")

        chosenJars = ['openapi',
                      'util',
                      'idea',
                      'trove4j',
                      'platform-api',
                      'platform-impl']

    }

    doLast {
        ideaArtifactsResolver.downloadTo ideaArtifactsResolver.IDEA_IC_ZIP, locallyDownloadedIdeaZipFile
        
        copy {
            from zipTree(locallyDownloadedIdeaZipFile)

            includes = chosenJars.collect { "lib/${it}.jar" }

            includeEmptyDirs = false

            into libDir

            // flatten the files
            eachFile { FileCopyDetails fileDetails ->
                fileDetails.setRelativePath new RelativePath(true, fileDetails.name)
            }
        }
    }
}

task extractSelectedFilesFromIdeaJars(dependsOn: downloadIdeaDistributionZipAndExtractSelectedJars) {
    ext {
        packages = [/*new PackageListFromManifest('META-INF/MANIFEST.MF'),*/
                    new PackageListFromSimpleFile('referencedPackages.txt')
        ].collectMany { it.pathsToInclude }
        extractDir = file("$downloadDir/dependencies")
    }

    doLast {
        for (library in downloadIdeaDistributionZipAndExtractSelectedJars.chosenJars) {
            copy {
                from zipTree("$libDir/${library}.jar")
                includes = packages
                includeEmptyDirs = false
                into extractDir
            }
            file("$libDir/${library}.jar").delete()
        }
    }
}

task createIdeDependenciesJar(type: Jar, dependsOn: extractSelectedFilesFromIdeaJars) {
    from extractSelectedFilesFromIdeaJars.extractDir

    destinationDir = libDir

    archiveName = 'ide-dependencies.jar'

    manifest {
        attributes 'Built-By': 'JetBrains',
                'Implementation-Vendor': 'JetBrains',
                'Implementation-Version': '1.0',
                'Implementation-Title': 'ide-dependencies'
    }

    doLast {
        extractSelectedFilesFromIdeaJars.extractDir.deleteDir()
    }
}

task downloadKotlinxLibraries(type: Copy) {
    from configurations.kotlinxLibraries

    into libDir

    rename 'kotlinx-coroutines-(\\w+)-(.*)', 'kotlinx-coroutines-$1.jar'
}

task downloadIdeaAndKotlinCompilerSources {
    ext {
        locallyDownloadedKotlinCompilerSourcesFile = file("$downloadDir/kotlin-compiler-sources.jar")
        locallyDownloadedIdeaSourcesFile = file("$downloadDir/idea-sdk-sources.jar")
    }

    doLast {
        tcArtifactsResolver.downloadTo tcArtifactsResolver.KOTLIN_COMPILER_SOURCES_JAR, locallyDownloadedKotlinCompilerSourcesFile

        ideaArtifactsResolver.downloadTo ideaArtifactsResolver.IDEA_IC_SOURCES_JAR, locallyDownloadedIdeaSourcesFile
    }
}

task repackageIdeaAndKotlinCompilerSources(type: Zip, dependsOn: downloadIdeaAndKotlinCompilerSources) {
    from zipTree(downloadIdeaAndKotlinCompilerSources.locallyDownloadedKotlinCompilerSourcesFile)
    from zipTree(downloadIdeaAndKotlinCompilerSources.locallyDownloadedIdeaSourcesFile)

    destinationDir = libDir

    archiveName = 'kotlin-compiler-sources.jar'
}

task downloadBundled(dependsOn: [downloadKotlinCompilerPluginAndExtractSelectedJars,
                                 downloadIntellijCoreAndExtractSelectedJars,
                                 createIdeDependenciesJar,
                                 downloadKotlinTCArtifacts,
                                 downloadKotlinxLibraries,
                                 repackageIdeaAndKotlinCompilerSources]) {
}

task getBundled(dependsOn: [downloadTestData, downloadTestFrameworkDependencies, downloadBundled])
